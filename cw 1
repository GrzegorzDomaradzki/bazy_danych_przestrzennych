1.Utwórz nową bazę danych nazywając ją sNumerIndeksu(na przykład s222195)
Jako admnin (sudo -u postgres psql)

CREATE DATABASE s298242;

================================================================
2.Dodaj schemat o nazwie firma

CREATE SCHEMA firma;

================================================================
3.Stwórz rolę o nazwie ksiegowosci nadaj jej uprawnienia tylko do odczytu.
Jako admnin.

CREATE ROLE ksiegowosc;
GRANT USAGE ON SCHEMA firma TO ksiegowosc;
GRANT SELECT ON ALL TABLES IN SCHEMA firma TO ksiegowosc;
ALTER DEFAULT PRIVILEGES IN SCHEMA firma GRANT SELECT ON TABLES TO ksiegowosc;
GRANT ALL ON SCHEMA firma TO write_user; // nie jest to część zadania, ale nie chcemy wszystkiego robić z pozycji admina.


================================================================
4.Dodaj cztery tabele...

Wprowadziłem małą modyfikację - zakładjąc, że pracownik w okresie rozliczeniowym pracuje więcej niż jednen dzień, prościej przypisać odniościk do wynagrodzenia w godzinach, niż na odwrót.

CREATE TABLE firma.pracownicy(
id_pracownika SERIAL NOT NULL,
imie TEXT NOT NULL,
nazwisko TEXT NOT NULL,
adres TEXT NOT NULL,
telefon TEXT NOT NULL
);

CREATE TABLE firma.godziny(
id_godziny SERIAL NOT NULL,
data DATE NOT NULL,
liczba_godzin INTEGER NOT NULL,
id_pracownika INTEGER NOT NULL,
id_wynagrodzenie INTEGER);

CREATE TABLE firma.pensja_stanowisko(
id_pensji SERIAL NOT NULL,
stanowisko TEXT,
kwota REAL NOT NULL);

CREATE TABLE firma.premia(
id_premii SERIAL NOT NULL,
rodzaj TEXT,
kwota REAL NOT NULL);

CREATE TABLE firma.wynagrodzenie(
id_wynagrodzenia SERIAL NOT NULL,
data DATE NOT NULL, 
id_pracownika INTEGER NOT NULL, 
id_pensji INTEGER NOT NULL, 
id_premii INTEGER);
==================================
b)
ALTER TABLE firma.pracownicy ADD PRIMARY KEY (id_pracownika);
ALTER TABLE firma.godziny ADD PRIMARY KEY (id_godziny);
ALTER TABLE firma.pensja_stanowisko ADD PRIMARY KEY (id_pensji);
ALTER TABLE firma.premia ADD PRIMARY KEY (id_premii);
ALTER TABLE firma.wynagrodzenie ADD PRIMARY KEY (id_wynagrodzenia);
==================================
c)
ALTER TABLE firma.godziny
ADD CONSTRAINT FK_GodzinyPracownicy
FOREIGN KEY (id_pracownika) REFERENCES firma.pracownicy(id_pracownika); 

ALTER TABLE firma.wynagrodzenie
ADD CONSTRAINT FK_WynagrodzeniePracownicy
FOREIGN KEY (id_pracownika) REFERENCES firma.pracownicy(id_pracownika); 

ALTER TABLE firma.godziny
ADD CONSTRAINT FK_GodzinyWynagrodzenie
FOREIGN KEY (id_wynagrodzenie) REFERENCES firma.wynagrodzenie(id_wynagrodzenia);

ALTER TABLE firma.wynagrodzenie
ADD CONSTRAINT FK_WynagrodzeniePensja
FOREIGN KEY (id_pensji) REFERENCES firma.pensja_stanowisko(id_pensji);

ALTER TABLE firma.wynagrodzenie
ADD CONSTRAINT FK_WynagrodzeniePremia
FOREIGN KEY (id_premii) REFERENCES firma.premia(id_premii);
===================================
d)
CREATE INDEX imie_idx ON firma.pracownicy (imie);
CREATE INDEX nazwisko_idx ON firma.pracownicy (nazwisko);
===================================
e)
COMMENT ON TABLE firma.pracownicy IS 'Lista pracowników';
COMMENT ON TABLE firma.godziny IS 'Przepracowane godziny w danym okresie rozliczeniowym';
COMMENT ON TABLE firma.pensja_stanowisko IS 'Standardowa pensja na danym stanowisku';
COMMENT ON TABLE firma.premia IS 'Premia do wynagrodzenia';
COMMENT ON TABLE firma.wynagrodzenie IS 'Wynagrodzenie wypłacone danego dnia';
===================================
f)
Nie jest wymagane żadne dziaąłnie - domyśnie nie jest wyzwalane żadne działanie.
================================================================
5.Wypełnij tabele treścią wg poniższego wzoru
a)
ALTER TABLE firma.godziny
ADD COLUMN miesiac INTEGER,
ADD COLUMN tydzien INTEGER;

CREATE OR REPLACE FUNCTION firma.fun_godziny()
RETURNS trigger AS '
BEGIN
  NEW.tydzien := EXTRACT(WEEK FROM  NEW.data);
  NEW.miesiac := EXTRACT(MONTH FROM  NEW.data);
  RETURN NEW;
END' LANGUAGE 'plpgsql';

CREATE TRIGGER trg_godziny
BEFORE INSERT ON firma.godziny
FOR EACH ROW
EXECUTE PROCEDURE firma.fun_godziny();
===================================
b)
ALTER TABLE firma.wynagrodzenie ALTER COLUMN data TYPE TEXT;

===================================
c) /// Nie wiem czy to ma sens, być moze w zadaniu chodziło poprostu o włożenie rekordu z brak i kwotą 0.
CREATE OR REPLACE FUNCTION firma.fun_premia()
RETURNS trigger AS '
BEGIN
  IF NEW.rodzaj=''brak'' THEN
    NEW.kwota:= 0;
  END IF;
  RETURN NEW;
END' LANGUAGE 'plpgsql';

CREATE TRIGGER trg_premia
BEFORE INSERT ON firma.premia
FOR EACH ROW
EXECUTE PROCEDURE firma.fun_premia();
================================================================
INSERT INTO firma.pracownicy(imie, nazwisko, adres, telefon) VALUES
('I1','N1','A','123456789'),
('I2','N2','B','223456789'),
('I3','N3','C','323456789'),
('I4','N4','D','423456789'),
('I5','N5','E','523456789'),
('I6','N6','F','623456789'),
('I7','N7','G','723456789'),
('I8','N8','H','823456789'),
('J1','Zna','J','923456789'),
('J2a','Zuna','K','023456789');


INSERT INTO firma.premia(rodzaj) VALUES ('brak');
INSERT INTO firma.premia(rodzaj, kwota) VALUES 
('typ 1', 100),
('typ 2', 200),
('typ 3', 500),
('typ 4', 1000);

INSERT INTO firma.pensja_stanowisko(stanowisko, kwota ) VALUES 
('nikt', 1300),
('mało ważny', 2000),
('średnio ważny', 3500),
('ważny', 5000),
('szef', 10000);

INSERT INTO  firma.wynagrodzenie(data, id_pracownika, id_pensji, id_premii) VALUES
('31-01-2020',1,5,1),
('31-01-2020',2,4,2),
('31-01-2020',3,3,3),
('31-01-2020',4,2,4),
('31-01-2020',5,1,5),
('31-01-2020',6,5,5),
('31-01-2020',7,4,4),
('31-01-2020',8,3,3),
('31-01-2020',9,2,2),
('31-01-2020',10,1,1);


INSERT INTO firma.godziny( data, liczba_godzin,id_pracownika, id_wynagrodzenie) VALUES
('1-01-2020',3,1,1 ),
('2-01-2020',5,1,1 ),
('3-01-2020',8,1,1 ),
('1-01-2020',3,2,2 ),
('2-01-2020',5,2,2 ),
('3-01-2020',8,2,2 ),
('4-01-2020',3,2,2 ),
('1-01-2020',5,3,3 ),
('2-01-2020',8,3,3 ),
('1-01-2020',3,4,4 ),
('2-01-2020',5,4,4 ),
('1-01-2020',8,5,5 ),
('2-01-2020',3,5,5 ),
('1-01-2020',5,6,6 ),
('1-01-2020',8,7,7 ),
('1-01-2020',3,8,8 ),
('2-01-2020',5,9,9 ),
('1-01-2020',8,9,9 )
('19-01-2020',8,9,9 );


================================================================
6.
a)
SELECT id_pracownika, nazwisko FROM firma.pracownicy;
================================================================
b) nie wiem co to jest płaca - załóżmy, że jest to pensja... - ze względu na moje dane (każdy dostaje > 1000zł) poszukajmy kto zarabia > 2000

SELECT a.id_pracownika
FROM firma.pracownicy a INNER JOIN(
    SELECT tb.id_pracownika FROM firma.pensja_stanowisko ta INNER JOIN
    firma.wynagrodzenie tb
    ON ta.id_pensji=tb.id_pensji 
    WHERE ta.kwota>2000
) b
ON a.id_pracownika=b.id_pracownika;
================================================================
c)
SELECT a.id_pracownika
FROM firma.pracownicy a INNER JOIN(
    SELECT tb.id_pracownika FROM firma.pensja_stanowisko ta INNER JOIN
    firma.wynagrodzenie tb
    ON ta.id_pensji=tb.id_pensji 
    WHERE ta.kwota>2000
    INTERSECT
    SELECT tb.id_pracownika FROM firma.premia ta LEFT JOIN
    firma.wynagrodzenie tb
    ON ta.id_premii=tb.id_premii 
    WHERE ta.kwota=0
) b
ON a.id_pracownika=b.id_pracownika;
================================================================
d)
SELECT * FROM firma.pracownicy WHERE imie LIKE '%a' AND LOWER(nazwisko) LIKE '%n%';

================================================================
e)
SELECT * FROM firma.pracownicy WHERE imie LIKE 'J%'

================================================================
f) jako że nie miałem danych... To ustalmy normę na 8, a nie 160 godzin.
SELECT a.imie, a.nazwisko, b.licz FROM
firma.pracownicy a INNER JOIN(
    SELECT ta.id_wynagrodzenie, ta.id_pracownika, SUM(ta.liczba_godzin) AS licz
    FROM firma.godziny ta GROUP BY ta.id_wynagrodzenie, ta.id_pracownika) b
ON a.id_pracownika=b.id_pracownika
WHERE licz>8;


================================================================
g)

SELECT a.imie, a.nazwisko
FROM firma.pracownicy a INNER JOIN(
    SELECT tb.id_pracownika FROM firma.pensja_stanowisko ta INNER JOIN
    firma.wynagrodzenie tb
    ON ta.id_pensji=tb.id_pensji 
    WHERE ta.kwota>=1500 AND ta.kwota<=3000
) b
ON a.id_pracownika=b.id_pracownika;

================================================================
h)

SELECT a.imie, a.nazwisko, b.licz FROM
firma.pracownicy a INNER JOIN(
    SELECT ta.id_wynagrodzenie, ta.id_pracownika, SUM(ta.liczba_godzin) AS licz
    FROM firma.godziny ta INNER JOIN(
        SELECT tb.id_pracownika FROM firma.premia ta LEFT JOIN
        firma.wynagrodzenie tb
        ON ta.id_premii=tb.id_premii 
        WHERE ta.kwota=0) tb
        ON ta.id_pracownika=tb.id_pracownika
    GROUP BY ta.id_wynagrodzenie, ta.id_pracownika) b
ON a.id_pracownika=b.id_pracownika
WHERE licz>8;
=================================================================
7.
a)
SELECT a.id_pracownika, a.imie, a.nazwisko, b.kwota
FROM firma.pracownicy a INNER JOIN(
    SELECT tb.id_pracownika, ta.kwota FROM firma.pensja_stanowisko ta INNER JOIN
    firma.wynagrodzenie tb
    ON ta.id_pensji=tb.id_pensji 
) b
ON a.id_pracownika=b.id_pracownika
ORDER BY b.kwota;

=================================================================
b)
SELECT a.id_pracownika, a.imie, a.nazwisko, b.kwota, b.premia
FROM firma.pracownicy a INNER JOIN(
    SELECT tb.id_pracownika, ta.kwota, tc.kwota AS premia
    FROM firma.wynagrodzenie tb
        INNER JOIN firma.pensja_stanowisko ta  
        ON ta.id_pensji=tb.id_pensji 
        INNER JOIN firma.premia tc
        ON tb.id_premii=tc.id_premii
) b
ON a.id_pracownika=b.id_pracownika
ORDER BY b.kwota DESC, b.premia DESC;

=================================================================
c) w tej bazie danych możemy tylko sprawdzić na jaki stanowisku byli pracownicy odbierając ostatnią pensję. Nie przechowujemy nigdzie statusu zatrudnienia - możemy policzyć ile razy osoba x odebrała premie jako ktoś, ale nie możemy dokonać takiego zliczenia. Tu Zliczę po prostu pracowników któży dostali wypłatę w danej dacie i pogrupuje.

SELECT b.stanowisko, count(b.stanowisko) 
FROM firma.wynagrodzenie a INNER JOIN firma.pensja_stanowisko b
ON a.id_pensji=b.id_pensji
WHERE a.data LIKE '31-01-2020' GROUP BY b.stanowisko;

==================================================================
d)
SELECT b.stanowisko, AVG(b.kwota+c.kwota), MIN(b.kwota+c.kwota),MAX(b.kwota+c.kwota) 
FROM firma.wynagrodzenie a 
INNER JOIN firma.pensja_stanowisko b
ON a.id_pensji=b.id_pensji
LEFT JOIN firma.premia c
ON a.id_premii=c.id_premii
WHERE b.stanowisko LIKE 'szef' GROUP BY b.stanowisko;

==================================================================
e)
SELECT SUM(b.kwota+c.kwota) 
FROM firma.wynagrodzenie a 
INNER JOIN firma.pensja_stanowisko b
ON a.id_pensji=b.id_pensji
LEFT JOIN firma.premia c
ON a.id_premii=c.id_premii;

==================================================================
f)
SELECT b.stanowisko, SUM(b.kwota+c.kwota) 
FROM firma.wynagrodzenie a 
INNER JOIN firma.pensja_stanowisko b
ON a.id_pensji=b.id_pensji
LEFT JOIN firma.premia c
ON a.id_premii=c.id_premii
GROUP BY b.stanowisko;
==================================================================
g)
SELECT b.stanowisko, COUNT(c.rodzaj) 
FROM firma.wynagrodzenie a 
INNER JOIN firma.pensja_stanowisko b
ON a.id_pensji=b.id_pensji
LEFT JOIN firma.premia c
ON a.id_premii=c.id_premii
WHERE c.rodzaj NOT LIKE 'brak' GROUP BY b.stanowisko;

==================================================================
h)
DELETE FROM firma.pracownicy WHERE id_pracownika IN ( 
    SELECT a.id_pracownika
    FROM firma.pracownicy a INNER JOIN(
        SELECT tb.id_pracownika FROM firma.pensja_stanowisko ta INNER JOIN
        firma.wynagrodzenie tb
        ON ta.id_pensji=tb.id_pensji 
        WHERE ta.kwota<1200
    ) b
    ON a.id_pracownika=b.id_pracownika
);

==================================================================
8.
a)
UPDATE firma.pracownicy SET telefon = '+(48)' || telefon;

==================================================================

b)
UPDATE firma.pracownicy SET telefon = CONCAT(LEFT(telefon, 5), ' ', SUBSTRING(telefon, 6, 3), '-', SUBSTRING(telefon, 9, 3), '-', RIGHT(telefon, 3));

==================================================================
c)
SELECT UPPER(nazwisko) FROM firma.pracownicy ORDER BY LENGTH(nazwisko) DESC LIMIT 1;


==================================================================
d)
SELECT a.id_pracownika, a.imie, a.nazwisko, md5(b.kwota::text)
FROM firma.pracownicy a INNER JOIN(
    SELECT tb.id_pracownika, ta.kwota FROM firma.pensja_stanowisko ta INNER JOIN
    firma.wynagrodzenie tb
    ON ta.id_pensji=tb.id_pensji 
) b
ON a.id_pracownika=b.id_pracownika;

==================================================================
9. Niestety z treści nie wynika jak piliczyć ile się dostaje za nadgodziny, wycinam tę część...
SELECT
    FORMAT('Pracownik %s %s, w dniu %s otrzymał pensję całkowitą na kwotę %s zł, gdzie wynagrodzeniezasadnicze wynosiło: %s zł, premia: %s zł.
',b.imie, b.nazwisko, a.data, c.kwota+d.kwota, c.kwota, d.kwota) 
FROM firma.wynagrodzenie a 
INNER JOIN firma.pracownicy b
ON a.id_pracownika=b.id_pracownika

INNER JOIN firma.pensja_stanowisko c
ON a.id_pensji=c.id_pensji

LEFT JOIN firma.premia d
ON a.id_premii=d.id_premii;







